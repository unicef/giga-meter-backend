trigger:
  - main

name: $(SourceBranchName).$(Build.BuildId).$(Date:yyyyMMdd).$(Rev:r)

variables:
  dockerRegistryServiceConnection: $(DOCKER_SERVICE_CONNECTION)
  dockerfilePath: './Dockerfile'
  app: $(DOCKER_REPOSITORY)
  imageRepository: 'main/$(app)'
  tag: '$(Build.BuildId)'

stages:
- stage: build_test
  displayName: Build and Test
  pool: 
    vmImage: 'ubuntu-22.04'
  jobs:
  - job: Test
    steps:
    - task: Bash@3
      displayName: Unit Tests
      condition: or(
          eq(variables['Build.Reason'], 'PullRequest'),
          eq(variables['Build.SourceBranch'], 'refs/heads/main')
        )
      continueOnError: false
      inputs:
        targetType: 'inline'
        script: |
          sudo npm install
          sudo npx prisma generate --schema=./src/prisma/schema.prisma
          sudo npm run test:covpip
    - task: Bash@3
      displayName: Sonar Scan
      condition: or(
          eq(variables['Build.Reason'], 'PullRequest'),
          eq(variables['Build.SourceBranch'], 'refs/heads/main')
        )
      inputs:
        targetType: 'inline'
        script: |
          export SONAR_SCANNER_VERSION=5.0.1.3006
          export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
          curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          export PATH=$SONAR_SCANNER_HOME/bin:$PATH
          export SONAR_SCANNER_OPTS="-server"
          export SONAR_TOKEN=$(SONAR_TOKEN)
          sonar-scanner \
            -Dsonar.projectKey=${{ lower(variables['Build.DefinitionName']) }} \
            -Dsonar.sources=src \
            -Dsonar.host.url=$(SONAR_HOST) \
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info \
            -Dsonar.exclusions=**/*/*.spec.ts,**/prisma/**   
  - job: Build
    dependsOn: Test
    steps:
    - task: Docker@2
      displayName: Build image
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        dockerfile: $(dockerfilePath)
        tags: |
          $(tag)
- stage: dev_deploy
  displayName: Deploy To Development
  dependsOn: build_test
  pool: 
    vmImage: 'ubuntu-22.04'
  jobs:
  - job: Development
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    steps: 
    - task: AzureRmWebAppDeployment@4
      displayName: 'Azure App Service Deploy: uni-connect-services'
      inputs:
        azureSubscription: 'UNI_DATA RS-UNI-OI-CONNECT'
        appType: webAppContainer
        WebAppName: 'uni-connect-services'
        deployToSlotOrASE: true
        ResourceGroupName: 'RS-UNI-OI-CONNECT'
        SlotName: dev
        DockerNamespace: uniconnectacr.azurecr.io
        DockerRepository: 'main/giga-meter-backend'
        DockerImageTag: '$(Build.BuildId)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Azure App Service Deploy: uni-ooi-giga-meter-backend'
      inputs:
        azureSubscription: 'UNI_GIGA RS-UNI-GIGA-MAPS'
        appType: webAppContainer
        WebAppName: 'uni-ooi-giga-meter-backend'
        deployToSlotOrASE: true
        ResourceGroupName: 'RS-UNI-GIGA-MAPS'
        SlotName: dev
        DockerNamespace: uniconnectacr.azurecr.io
        DockerRepository: 'main/giga-meter-backend'
        DockerImageTag: '$(Build.BuildId)'
- stage: prod_deploy
  displayName: Deploy To Prouction
  trigger: manual
  pool: 
    vmImage: 'ubuntu-22.04'
  jobs:
  - job: Production
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    steps: 
#    - task: AzureRmWebAppDeployment@4
#      inputs:
#        ConnectionType: 'AzureRM'
#        azureSubscription: 'UNI_DATA RS-UNI-OI-CONNECT'
#        appType: 'webAppContainer'
#        WebAppName: 'uni-connect-services'
#        DockerNamespace: 'uniconnectacr.azurecr.io'
#        DockerRepository: 'main/giga-meter-backend'
#        DockerImageTag: '$(Build.BuildId)'
#        AppSettings: '-DAILY_CHECK_APP_API_CODE $(DAILY_CHECK_APP_API_CODE) -DATABASE_URL $(DATABASE_URL) -PCDC_APP_DOWNLOAD_URL $(PCDC_APP_DOWNLOAD_URL) -PROJECT_CONNECT_SERVICE_URL $(PROJECT_CONNECT_SERVICE_URL) -SENTRY_DSN $(SENTRY_DSN) -USE_AUTH $(USE_AUTH) -WEBSITES_PORT $(WEBSITES_PORT)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Azure App Service Deploy: uni-ooi-giga-meter-backend'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'UNI_GIGA RS-UNI-GIGA-MAPS'
        appType: 'webAppContainer'
        WebAppName: 'uni-ooi-giga-meter-backend'
        DockerNamespace: 'uniconnectacr.azurecr.io'
        DockerRepository: 'main/giga-meter-backend'
        DockerImageTag: '$(Build.BuildId)'
        AppSettings: '-DAILY_CHECK_APP_API_CODE $(DAILY_CHECK_APP_API_CODE) -DATABASE_URL $(DATABASE_URL) -PCDC_APP_DOWNLOAD_URL $(PCDC_APP_DOWNLOAD_URL) -PROJECT_CONNECT_SERVICE_URL $(PROJECT_CONNECT_SERVICE_URL) -SENTRY_DSN $(SENTRY_DSN) -USE_AUTH $(USE_AUTH) -WEBSITES_PORT $(WEBSITES_PORT) -NODE_ENV $(NODE_ENV)'
